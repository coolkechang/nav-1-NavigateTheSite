{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","console","log","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","target","closest","length","key","i","toLowerCase"],"mappings":"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","file":"main.ae0fb1c1.js","sourceRoot":"..\\src","sourcesContent":["const $siteList = $('.siteList')\r\nconst $lastLi = $siteList.find('li.last')\r\nconst x = localStorage.getItem('x') //读取当前网站下的x\r\nconst xObject = JSON.parse(x) //JSON.parse(x)会尝试把字符串x变成对象\r\nconst hashMap = xObject || [\r\n    //当xObject存在，则hashMap = xObject。否则就初始化为一个“数组”。（是应对初始情况下，还没有xObject这个情况）\r\n    {\r\n        logo: 'A',\r\n        url: 'https://www.acfun.cn',\r\n    },\r\n    {\r\n        logo: 'B',\r\n        url: 'http://www.bilibili.com',\r\n    },\r\n]\r\n//上述代码可以使得我们在点击新增网站成功后使添加的网站保存下来（不然返回后新增的网站就没了）。方法是用一种数据结构将需要保存的记下来，这种数据结构是一个由哈希表组成的数组（hashMap）\r\n\r\nconst simplifyUrl = (url) => {\r\n    return url\r\n        .replace('https://', '')\r\n        .replace('http://', '')\r\n        .replace('www.', '')\r\n        .replace(/\\/.*/, '') //此处使用了正则表达式。意思是把 / 开头的内容删掉。目的是防止用户复制过来的url过长（域名后面跟了路径、锚点等一大串）。\r\n}\r\n//声明一个simplifyUrl ,删除获取的URL所含有的 https:// 和 http:// 和 www.\r\n\r\nconst render = () => {\r\n    $siteList.find('li:not(.last)').remove() //获取siteList中所有的li并删除，除了last。这样可以防止再次遍历后把之前的网站再次保留导致重复。\r\n    hashMap.forEach((node, index) => {\r\n        //forEach会给到两个参数，一个当前元素，一个下标。\r\n        const $li = $(`<li>\r\n            <div class=\"site\">\r\n                <div class=\"logo\">${node.logo}</div>\r\n                <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n                <div class=\"close\">\r\n                    <svg class=\"icon\">\r\n                        <use xlink:href=\"#icon-close\"></use>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        </li>`).insertBefore($lastLi)\r\n        $li.on('click', () => {\r\n            window.open(node.url)\r\n        })\r\n        //这里在div.site外应该有个a标签（<a href=\"${node.url}\"></a>）包裹，用作跳转页面。但是a标签影响了下面的冒泡事件。在这里用js代替了a标签的作用。window.open()可实现页面跳转\r\n        $li.on('click', '.close', (e) => {\r\n            e.stopPropagation() //阻止冒泡，不然点击 x 会跳转页面，不是关闭作用了。\r\n            hashMap.splice(index, 1) //从index（下标）删除掉一个\r\n            render() //渲染到页面\r\n        })\r\n    })\r\n}\r\n\r\nrender()\r\n\r\n$('.addButton').on('click', () => {\r\n    //获取 addButton 并对其监听\r\n    let url = window.prompt('请输入您想要添加的网址') //显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字。\r\n    if (url.indexOf('https') !== 0) {\r\n        url = 'https://' + url\r\n    } //判断用户操作,若没有 https ，则添加 https://\r\n    //indexOf() 方法返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1。\r\n    console.log(url)\r\n    hashMap.push({\r\n        logo: simplifyUrl(url)[0].toUpperCase(), //上面声明了一个函数simplifyUrl。这里直接用它，并将其变成大写。这样新增的网站logo就会变成大写首字母。\r\n        url: url,\r\n    })\r\n    render()\r\n})\r\n//上述代码针对用户点击“新增网站”的监听与执行过程，先 render() ，再 push ，再 render()\r\n\r\nwindow.onbeforeunload = () => {\r\n    const string = JSON.stringify(hashMap) //JSON.stringify(xxx)可以将xxx变成字符串。\r\n    localStorage.setItem('x', string) //在本地设置一个x,x的值是string。即存储的数据将保存在浏览器会话中，并且是长期保存\r\n}\r\n//onbeforeunload 事件在即将离开当前页面（刷新或关闭）时触发。该事件可用于弹出对话框，提示用户是继续浏览页面还是离开当前页面。\r\n//在这里指当用户顾关闭或者刷新页面时，会将当前 hashMap 存到 x 里\r\n//$(header).off('keypress')\r\n\r\n$(document).on('keypress', (e) => {\r\n    if ($(e.target).closest('header').length > 0) {\r\n        return\r\n    }\r\n    // 当触发事件的元素在 header 元素内时，不执行处理函数并且阻止事件冒泡\r\n    const { key } = e //是 const key = e.key 的简写。当发现变量名和属性名一样时，可这样简写。\r\n    for (let i = 0; i <= hashMap.length; i++) {\r\n        if (hashMap[i].logo.toLowerCase() === key) {\r\n            window.open(hashMap[i].url)\r\n        } //如果hashMap里面logo的小写字母对应了键盘按下的按键，直接跳转相应的页面\r\n    }\r\n})\r\n//监听用户键盘按下，可以对document元素来操作。\r\n//这段代码实现了用户可以直接点击对应logo字母的键盘按键来完成页面跳转。但是如果出现新增网站中有多个首字母一样的，只能跳转到第一个。\r\n"]}